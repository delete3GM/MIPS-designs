ori $16, $0, 1   # $16 = 1
ori $17, $0, 3   # $17 = 3
ori $8, $0, 1    # $8 = 1
ori $12, $0, 0xabab  # $12 = 0xabab
lui $13, 10      # $13 = 10 << 16 = 0x000a0000
start:addu $4, $0, $16 # $4 = $16 = 1
addu $5, $0, $8  # $5 = $8 = 1
jal newadd       # 跳转到 newadd 函数并保存返回地址到 $31
addu $16, $0, $2 # $16 = $2  (newadd 的返回结果)
subu $17, $17, $8 # $17 -= $8  (3 - 1 = 2)
beq $16, $17, start  # 如果 $16 == $17，跳转到 start
ori $8, $0, 4    # $8 = 4
addiu $24, $0, 0x7fffffff  # $24 = 0x7fffffff
addiu $9, $24, 3 # $9 = 0x80000002
addiu $10, $24, 5 # $10 = 0x80000004
addu $0, $0, $0   # No-op (无操作)

start2:
sw $9, 0($8)    # 存储 $9（0x80000002）到内存地址 $8（4）
lw $14, 0($8)   # 读取内存地址 $8（4）的值到 $14，$14 = 0x80000002
sw $10, 4($8)   # 存储 $10（0x80000004）到内存地址 $8 + 4 = 8
lw $15, 4($8)   # 读取内存地址 $8 + 4 的值到 $15，$15 = 0x80000004
sw $4, -4($8)   # 存储 $4（1）到内存地址 $8 - 4 = 0
lw $18, -4($8)  # 读取内存地址 $8 - 4 的值到 $18，$18 = 1
addu $4, $0, $8 # $4 = $8 = 4
addu $5, $0, $9 # $5 = $9 = 0x80000002
jal newadd      # 跳转到 newadd 函数并保存返回地址到 $31
slt $25, $10, $8  # $25 = ($10 < $8) ? 1 : 0  -> 0，因为 $10  (0x80000004) 大于 $8（4）
beq $25, $0, end2 # 如果 $25 == 0，跳转到 end2
slt $20, $12, $4  # $20 = ($12 < $4) ? 1 : 0  -> 0，因为 $12（0xabab）大于 $4（4）
beq $20, $0, end1 # 如果 $20 == 0，跳转到 end1
lui $12, 65535    # $12 = 0xffff << 16 = 0xffff0000

end1:
ori $0, $0, 1    # No-op (无操作)，因为对 $0 的赋值没有效果
lui $19, 0xefef  # $19 = 0xefef << 16 = 0xefef0000
addiu $3, $0, 0xababcdcd # $3 = 0xababcdcd

start3:
addiu $4, $3, 2  # $4 = $3 + 2 = 0xababcdcf
addi $23, $3, 5  # $23 = $3 + 5 = 0xababcdd2
jal newadd       # 调用 newadd 函数
addu $8, $0, $2  # $8 = $2（newadd 的结果）
addu $4, $0, $8  # $4 = $8
addu $5, $0, $9  # $5 = $9
jal newadd       # 再次调用 newadd
addu $9, $0, $2  # $9 = $2（newadd 的结果）
addu $9, $8, $0  # $9 = $8 然后再等于 $8 的值
lui $10, 0x69    # $10 = 0x69 << 16 = 0x690000
beq $8, $9, start4  # 如果 $8 == $9，跳转到 start4
beq $0, $0, start3  # 永远跳转到 start3

start4:
j end  # 跳转到 end

newadd:
addu $2, $4, $5  # $2 = $4 + $5
addi $0, $12, 0x1234 # No-op (因为操作 $0 无效）
jr $31  # 返回到调用点

end2:
addi $26, $0, 0x5678  # $26 = 0x5678

end:
# 结束执行